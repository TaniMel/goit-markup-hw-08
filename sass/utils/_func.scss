:root {
  --primary-text-color: #212121;
  --accent-color: #2196f3;
  --secondary-text-color: #757575;
  --logo-color-header: #000;
  --primary-color-footer: #fff;
  --address-color-footer: rgba(255, 255, 255, 0.6);
  --text-color-hero: #fff;
  --text-color-work: #fff;

  --bg-color-header: #fff;
  --bg-color-card: #fff;
  --bg-color-footer: #2f303a;
  --bg-color-hero: #2f303a;
  --bg-color-primary: #fff;
  --bg-color-secondary: #f5f4fa;
  --bg-color-button-hover: #188ce8;
  --bg-color-social-icon: #afb1b8;

  --card-border-var: 1px solid #eeeeee;

  --card-item-gap: 30px;

  --box-shadow-var: 0px 1px 3px rgba(0, 0, 0, 0.12),
    0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);

  --var-animation-cubic: cubic-bezier(0.4, 0, 0.2, 1);
  --var-animation-duration: 250ms;
}

// ========== Для перевода px в rem ==========
@mixin font-size($size, $base: 16) {
  font-size: $size; // fallback для старых браузеров
  font-size: ($size / $base) * 1rem;
}

$breakpoints: (
  "mobile": 480px,
  "tablet": 768px,
  "desktop": 1200px,
);

@function getDev($key) {
  @return map-get($breakpoints, $key);
}

@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

// ========== Для retina изображений ==========
@mixin retina($image, $width: "false", $gradient: "false") {
  @if $width != "false" and $gradient != "false" {
    @media screen and (min-device-pixel-ratio: 2) and (min-width: $width),
      screen and (min-resolution: 192dpi) and (min-width: $width),
      screen and (min-resolution: 2dppx) and (min-width: $width) {
      background-image: $gradient, url($image);
    }
  } @else if $width != "false" and $gradient == "false" {
    @media screen and (min-device-pixel-ratio: 2) and (min-width: $width),
      screen and (min-resolution: 192dpi) and (min-width: $width),
      screen and (min-resolution: 2dppx) and (min-width: $width) {
      background-image: url($image);
    }
  } @else if $width == "false" and $gradient == "false" {
    @media screen and (min-device-pixel-ratio: 2),
      screen and (min-resolution: 192dpi),
      screen and (min-resolution: 2dppx) {
      background-image: url($image);
    }
  } @else if $width == "false" and $gradient != "false" {
    @media screen and (min-device-pixel-ratio: 2),
      screen and (min-resolution: 192dpi),
      screen and (min-resolution: 2dppx) {
      background-image: $gradient, url($image);
    }
  }
}

// ========== Для шрифтов ==========
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }

  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@mixin font-source-sans($size: false, $lh: false, $weight: false) {
  @if $size {
    font-size: $size;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: decimal-round($lh / $size, 2);
  }
}
